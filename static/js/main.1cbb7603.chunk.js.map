{"version":3,"sources":["containers/App.js","components/Card.js","components/CardList.js","components/Scroll.js","registerServiceWorker.js","index.js"],"names":["t1","r2","Card","name","email","price","console","log","className","toFixed","CardList","robots","ra_arr","Object","keys","map","user","i","key","Scroll","props","style","overflow","border","height","children","App","state","isLoading","pokemon","undefined","isLoading1","pokemon1","debug","axios","get","then","response","setState","data","this","replace","parseInt","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1cbb7603.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport axios from 'axios';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nvar robots = {} ;\nvar t1 ;\nvar r2 ;\nvar json ;\nvar url = \"https://api.coindesk.com/v1/bpi/currentprice.json\";\nvar url1 = \"https://api.exchangeratesapi.io/latest\";\nclass App extends Component {\n  constructor(props) {\n    super(props) ;\n    this.state = { isLoading: true, pokemon: undefined , isLoading1: true, pokemon1: undefined };\n    //this.state = { isLoading1: true, pokemon1: undefined };\n  }\n\n  componentDidMount() {\n    console.debug(\"After mount! Let's load data from API...\");\n    axios.get(url).then(response => {\n      this.setState({ pokemon: response.data });\n      this.setState({ isLoading: false });\n    });\n    axios.get(url1).then(response => {\n      this.setState({ pokemon1: response.data });\n      this.setState({ isLoading1: false });\n    });\n  }\n\n  \n\n  render() {\n    const { isLoading, pokemon , isLoading1 , pokemon1} = this.state;\n    //const { robots } = this.robots;\n    if (isLoading) {\n      return <div className=\"App\">Loading...</div>;\n    }\n    if (isLoading1) {\n      return <div className=\"App\">Loading...</div>;\n    }\n    console.log(pokemon) ;\n    console.log(pokemon1) ;\n    t1 = pokemon[\"time\"][\"updated\"] ;\n    r2= pokemon[\"bpi\"][\"EUR\"][\"rate\"] ;\n    console.log(t1) ;\n    console.log(r2) ;\n    r2=r2.replace(/\\,/g,''); \n    r2=parseInt(r2,10);\n        return       (\n        <div className='tc'>\n          <h1 className='f1'><u>Bitcoin Price</u></h1>\n          <Scroll>\n            <CardList robots={pokemon1} t1={t1} r2={r2}/>\n          </Scroll>\n        </div>\n      );\n\t\t\t\t\t\n    \n\t\t\n\t\t\n  }\n}\n\nexport default App;","import React from 'react';\n\nconst Card = ({ name, email, price }) => {\n  console.log(price) ;\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n\n      <div>\n        <h2>PRICE: {name}  {price.toFixed(2)}</h2>\n        <p>last updated: {email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots , t1 , r2}) => {\n  console.log(robots) ;\n  console.log(t1) ;\n  console.log(r2) ;\n  var ra_arr = Object.keys(robots[\"rates\"]) ;\n\n  console.log(ra_arr) ;\n  console.log(robots[\"rates\"][ra_arr[0]]);\n  return (\n    \n    <div>\n      {\n        ra_arr.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              name={ra_arr[i]}\n              price={robots[\"rates\"][ra_arr[i]]*r2}\n              email={t1}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons'; \n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}